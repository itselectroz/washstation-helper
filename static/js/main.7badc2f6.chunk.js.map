{"version":3,"sources":["app/hooks.ts","services/washstation-service.ts","features/user/user-slice.ts","services/alarm-service.ts","components/Machine.tsx","components/OpenSource.tsx","components/ThemeSelector.tsx","assets/alarm.mp3","components/Dashboard.tsx","components/Login.tsx","routers/LoginRoute.tsx","App.tsx","reportWebVitals.ts","app/store.ts","theme.ts","index.tsx"],"names":["useAppSelector","useSelector","washstationApi","createApi","reducerPath","baseQuery","fetchBaseQuery","baseUrl","prepareHeaders","headers","state","getState","user","token","set","endpoints","builder","mutation","query","args","url","method","body","formUrlEncoded","profile","machines","location","Location","toString","locations","useTokenMutation","useMachinesQuery","useLocationsQuery","userSlice","createSlice","name","initialState","refreshToken","expires","location_id","reducers","setLocation","action","payload","extraReducers","addMatcher","matchFulfilled","access_token","refresh_token","Date","now","expires_in","toISOString","default_location_id","actions","AlarmService","this","running","alarmTriggered","some","v","isAvailable","stopAlarm","Machine","machine","rest","justifyContent","direction","align","size","color","maxWidth","isTruncated","isBusy","Math","floor","secLeft","padStart","OpenSource","mt","minWidth","href","isExternal","pr","ThemeSelector","useColorMode","colorMode","toggleColorMode","onClick","variant","icon","Moon","Sun","Dashboard","currentLocation","dispatch","useDispatch","pollingInterval","data","find","id","useState","setRunning","update","alarm","playStatus","loop","minHeight","borderWidth","borderRadius","px","width","textAlign","boxShadow","py","onChange","e","target","value","flex","placeholder","map","updateRunning","my","height","bg","pos","top","left","Login","toast","useToast","push","useHistory","React","username","password","grant_type","formState","setFormState","login","isLoading","useLazyQuerySubscription","fetchProfile","teal","useColorModeValue","a","preventDefault","unwrap","loginResponse","Error","status","title","description","isClosable","onSubmit","type","textColor","LoginRoute","InternalComponent","component","render","props","to","pathname","from","App","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","store","configureStore","reducer","userReducer","middleware","getDefaultMiddleware","concat","theme","extendTheme","config","initialColorMode","useSystemColorMode","GlobalStyles","css","ReactDOM","StrictMode","styles","document","getElementById"],"mappings":"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","file":"static/js/main.7badc2f6.chunk.js","sourcesContent":["import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from \"./store\";\n\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;","import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\nimport formUrlEncoded from 'form-urlencoded';\nimport { RootState } from '../app/store';\n\nconst WASHSTATION_URL = 'https://cors-anywhere-electroz.herokuapp.com/https://mobile.kosmoshub.com/washstation/';\n\nexport type TokenPasswordPayload = {\n    username: string;\n    password: string;\n    grant_type: 'password';\n};\n\nexport type TokenRefreshPayload = {\n    refresh_token: string;\n    grant_type: 'refresh_token';\n};\n\nexport type TokenPayload = TokenPasswordPayload | TokenRefreshPayload;\n\nexport type TokenResponse = {\n    access_token: string;\n    expires_in: number;\n    token_type: string;\n    scope: string | null;\n    refresh_token: string;\n};\n\nexport type Machine = {\n    id: number;\n    name: string;\n    size: string;\n    isBroken: boolean;\n    isAvailable: boolean;\n    isBusy: boolean;\n    statusName: string;\n    isReserved: boolean;\n    isReservedForMe: boolean;\n    secLeft: number;\n    statusId: number;\n    type: number;\n    endOfCycle: boolean;\n    showLeftTime: boolean;\n    manufacturerCode: string;\n    hasExtraReservation: boolean;\n    hasExtraReservationForMe: boolean;\n    extraReservationTime: string;\n    lastApiStatus: number;\n    lastApiStatusTime: {\n        date: string;\n        timezone_type: number;\n        timezone: string;\n    };\n    isReadyToStart: boolean;\n}\n\nexport type MachineResponse = Machine[];\n\nexport type Profile = {\n    is_company: boolean;\n    first_name: string;\n    last_name: string;\n    email: string;\n    phone: string;\n    company_name: string;\n    company_code: string;\n    company_vat: string;\n    address: string;\n    newsletter: boolean;\n    send_notifications: boolean;\n    default_location_id: number;\n};\n\nexport type WashstationLocation = {\n    id: number;\n    name: string;\n    address: string | null;\n    onlyPreferred: boolean;\n    coordinates: {\n      lat: number | null;\n      lng: number | null;\n    };\n    settings: {\n      basicReservationMinutes: number | null;\n      extendedReservationMinutes: number | null;\n    };\n    features: {\n      basicReservationEnabled: boolean;\n      extendedReservationEnabled: boolean;\n    }\n  }\n\nexport const washstationApi = createApi({\n    reducerPath: 'washstation-service',\n    baseQuery: fetchBaseQuery({\n        baseUrl: WASHSTATION_URL,\n        prepareHeaders(headers, { getState }) {\n            const state: RootState = getState() as RootState;\n            if (!!state.user.token) {\n                headers.set('Authorization', `Bearer ${state.user.token}`);\n            }\n\n            headers.set('X-Requested-With', 'XMLHttpRequest');\n            headers.set('Content-Type', 'application/x-www-form-urlencoded');\n\n\n\n            return headers;\n        },\n    }),\n    endpoints: (builder) => ({\n        token: builder.mutation<TokenResponse, TokenPayload>({\n            query: (args) => ({\n                url: `/oauth/v2/token`,\n                method: 'POST',\n                body: formUrlEncoded({\n                    ...args,\n                    \"client_id\": \"1_1881648594\",\n                    \"client_secret\": \"A4f5d4gf59aT4566999999GHJ\"\n                })\n            }),\n        }),\n        profile: builder.query<Profile, void>({\n            query: () => ({\n                url: '/api/profile'\n            })\n        }),\n        machines: builder.query<MachineResponse, number>({\n            query: (location: number) => ({\n                url: '/api/catalog/machines/1',\n                headers: {\n                    Location: location.toString()\n                }\n            })\n        }),\n        locations: builder.query<WashstationLocation[], void>({\n            query: () => ({\n                url: '/api/catalog/locations'\n            })\n        }),\n    })\n});\n\n\nexport const { useTokenMutation, useMachinesQuery, useLocationsQuery } = washstationApi;","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\"\nimport { Profile, washstationApi } from \"../../services/washstation-service\";\n\ntype UserState = {\n    token: string | null;\n    refreshToken: string | null;\n    expires: string | null;\n\n    profile: Profile | null;\n    location_id: number;\n}\n\nconst initialState: UserState = {\n    token: null,\n    refreshToken: null,\n    expires: null,\n    profile: null,\n    location_id: -1\n};\n\nconst userSlice = createSlice({\n    name: 'user',\n    initialState,\n    reducers: {\n        setLocation(state, action: PayloadAction<number>) {\n            state.location_id = action.payload;\n        }\n    },\n    extraReducers: (builder) => {\n        builder.addMatcher(washstationApi.endpoints.token.matchFulfilled, (state, { payload }) => {\n            state.token = payload.access_token;\n            state.refreshToken = payload.refresh_token;\n            state.expires = new Date(Date.now() + payload.expires_in).toISOString();\n        });\n\n        builder.addMatcher(washstationApi.endpoints.profile.matchFulfilled, (state, { payload }) => {\n            state.profile = payload;\n            if(state.location_id == null) {\n                state.location_id = payload.default_location_id;\n            }\n        });\n    }\n});\n\nexport default userSlice.reducer;\nexport const { setLocation } = userSlice.actions;","import { Machine } from \"./washstation-service\";\n\nexport class AlarmService {\n\n    public static running: boolean = false;\n    public static alarmTriggered: boolean = false;\n\n    public static async update(machines: Machine[]): Promise<void> {\n        if(this.running)\n            this.alarmTriggered = machines.some((v) => v.isAvailable);\n        else\n            this.alarmTriggered = false;\n    }\n    \n    public static updateRunning(running: boolean) { \n        this.running = running;\n        if(this.running && this.alarmTriggered) {\n            this.stopAlarm();\n        }\n    }\n\n    public static triggerAlarm(): void {\n        this.alarmTriggered = true;\n    }\n\n    public static stopAlarm(): void {\n        this.alarmTriggered = false;\n    }\n}","import { Flex, Text } from \"@chakra-ui/layout\";\nimport { MdLocalLaundryService } from 'react-icons/md';\nimport { Machine as MachineType } from \"../services/washstation-service\";\n\nexport type MachineProps = {\n    machine: MachineType;\n    [x: string]: any;\n}\n\nexport const Machine = ({ machine, ...rest }: MachineProps) => {\n    // const greenColour = useColorModeValue('teal', '')\n    return (\n        <Flex justifyContent='center' {...rest}>\n            <Flex direction=\"column\" align=\"center\">\n                <MdLocalLaundryService size={75} color=\"teal\" />\n                <Text maxWidth=\"100px\" isTruncated>{machine.name}</Text>\n                <Text color={machine.isAvailable ? '#0a8a64' : 'red'}>{machine.isAvailable ? 'Available' : 'Busy'}</Text>\n                {!machine.isAvailable && machine.isBusy &&\n                    <Text>{Math.floor(machine.secLeft / 60).toString().padStart(2, '0')}:{(machine.secLeft % 60).toString().padStart(2, '0')}</Text>}\n            </Flex>\n        </Flex>\n    );\n}","import { Box, Flex, Link, Text } from \"@chakra-ui/layout\";\nimport { AiOutlineGithub } from \"react-icons/ai\";\n\nexport const OpenSource = () => (\n    <Box mt={5} minWidth=\"full\">\n        <Flex minWidth=\"full\" justifyContent=\"center\">\n            <Link href=\"https://www.github.com/itselectroz/washstation-helper\" isExternal>\n                <Flex align=\"center\">\n                    <Text pr={2}>This project is open source</Text>\n                    <AiOutlineGithub />\n                </Flex>\n            </Link>\n        </Flex>\n    </Box>\n);","import { IconButton } from \"@chakra-ui/button\";\nimport { useColorMode } from \"@chakra-ui/color-mode\";\nimport { MoonIcon, SunIcon } from \"@chakra-ui/icons\";\nimport { Flex } from \"@chakra-ui/layout\";\n\nexport const ThemeSelector = () => {\n    const { colorMode, toggleColorMode } = useColorMode();\n    return (\n        <Flex>\n            <IconButton \n                aria-label=\"Theme Selector\"\n                onClick={toggleColorMode}\n                variant=\"ghost\"\n                icon={colorMode === 'light' ? <MoonIcon/> : <SunIcon/>}\n            />\n        </Flex>\n    );\n}","export default __webpack_public_path__ + \"static/media/alarm.7059255a.mp3\";","import { Box, Flex, Wrap, Text } from \"@chakra-ui/layout\";\nimport { Button } from \"@chakra-ui/react\";\nimport { Select } from \"@chakra-ui/select\";\nimport { useState } from \"react\";\nimport { useAppDispatch, useAppSelector } from \"../app/hooks\";\nimport { setLocation } from \"../features/user/user-slice\";\nimport { AlarmService } from \"../services/alarm-service\";\nimport { useLocationsQuery, useMachinesQuery, WashstationLocation } from \"../services/washstation-service\";\nimport { Machine } from \"./Machine\";\nimport { OpenSource } from \"./OpenSource\";\nimport { ThemeSelector } from \"./ThemeSelector\";\nimport Sound from 'react-sound';\nimport alarm from '../assets/alarm.mp3';\n\nexport const Dashboard = () => {\n    const dispatch = useAppDispatch();\n\n    const location_id = useAppSelector((state) => state.user.location_id);\n    const { data: machines = [] } = useMachinesQuery(location_id, {\n        pollingInterval: 500,\n    });\n\n    const { data: locations = [] } = useLocationsQuery();\n\n    let currentLocation: WashstationLocation | undefined;\n    if (location_id !== -1) {\n        currentLocation = locations.find(v => v.id === location_id);\n    }\n\n    const [running, setRunning] = useState(false);\n\n    // I'm certain this is bad practice, feel free to make a PR about this but...\n    // Since this gets reloaded every time the machine query responds:\n    AlarmService.update(machines);\n\n    function locationChanged(e: any) {\n        dispatch(setLocation(e.target.value));\n    }\n\n    function toggleRunning() {\n        AlarmService.updateRunning(!running);\n        setRunning(!running);\n    }\n\n    return (\n        <Box>\n            <Sound\n                url={alarm}\n                playStatus={AlarmService.alarmTriggered ? 'PLAYING' : 'STOPPED'}\n                loop={true}\n            />\n            <Flex minHeight=\"100vh\" minWidth=\"full\" justifyContent=\"center\" align=\"center\">\n                <Box>\n                    <Box\n                        borderWidth={1}\n                        borderRadius={4}\n                        px={6}\n                        width=\"full\"\n                        maxWidth=\"650px\"\n                        textAlign=\"center\"\n                        boxShadow=\"lg\"\n\n                        py={5}\n                    >\n                        <Flex align=\"center\" justifyContent=\"center\">\n                            <Select onChange={locationChanged} flex={5} placeholder={!!currentLocation ? currentLocation.name : \"Not Set\"}>\n                                {locations.map((location) => (\n                                    <option value={location.id}>{location.name}</option>\n                                ))}\n                            </Select>\n                            <Box flex={1} />\n                            <Button flex={3} textAlign=\"center\" onClick={toggleRunning}>{running ? 'Stop' : 'Start'}</Button>\n                            <Text flex={3} textAlign=\"center\" color={running ? '#0a8a64' : 'red'}>{running ? 'Running' : 'Stopped'}</Text>\n                        </Flex>\n                        <Flex minWidth=\"full\" justifyContent=\"center\" my={5}>\n                            <Box height={0.25} width=\"90%\" bg=\"teal\" />\n                        </Flex>\n                        <Wrap>\n                            {machines.map((machine) => (\n                                <Machine machine={machine} px={4} />\n                            ))}\n                        </Wrap>\n                    </Box>\n                    <OpenSource />\n                </Box>\n                <Box pos=\"absolute\" top=\"0\" left=\"0\">\n                    <ThemeSelector />\n                </Box>\n            </Flex>\n        </Box>\n    );\n}","import { Box, Button, Flex, FormControl, Heading, Input, Text, useColorModeValue, useToast } from \"@chakra-ui/react\";\nimport React from \"react\";\nimport { useHistory } from \"react-router\";\nimport { TokenPasswordPayload, useTokenMutation, washstationApi } from \"../services/washstation-service\";\nimport { OpenSource } from \"./OpenSource\";\nimport { ThemeSelector } from \"./ThemeSelector\";\n\nexport const Login = () => {\n\n    const toast = useToast();\n\n    const { push } = useHistory();\n\n    const [formState, setFormState] = React.useState<TokenPasswordPayload>({\n        username: '',\n        password: '',\n        grant_type: 'password'\n    });\n\n    const [login, { isLoading }] = useTokenMutation();\n    const [fetchProfile] = washstationApi.endpoints.profile.useLazyQuerySubscription();\n\n    const teal = useColorModeValue('teal', 'teal');\n\n    async function onSubmit(e: any) {\n        e.preventDefault();\n\n        try {\n            const loginResponse = await login(formState).unwrap();\n\n            if (!loginResponse || !loginResponse.access_token) {\n                throw new Error();\n            }\n\n            fetchProfile();\n\n            push('/');\n        }\n        catch (e: any) {\n            toast({\n                status: 'error',\n                title: 'Error',\n                description: 'Oh no, there was an error!',\n                isClosable: true,\n            });\n        }\n    }\n\n    return (\n        <Flex minHeight=\"100vh\" minWidth=\"full\" justifyContent=\"center\" align=\"center\">\n            <Box>\n                <Box\n                    borderWidth={1}\n                    borderRadius={4}\n                    px={6}\n                    width=\"full\"\n                    maxWidth=\"500px\"\n                    textAlign=\"center\"\n                    boxShadow=\"lg\"\n\n                    py={5}\n                >\n                    <form onSubmit={onSubmit}>\n                        <Heading>Login with Washstation</Heading>\n                        <Text>This is not an official washstation site</Text>\n                        <FormControl mt={5}>\n                            <Input\n                                type=\"email\"\n                                placeholder=\"Email\"\n                                onChange={(e) => setFormState({ ...formState, username: e.target.value })}\n                            />\n                        </FormControl>\n                        <FormControl mt={3}>\n                            <Input\n                                type=\"password\"\n                                placeholder=\"Password\"\n                                onChange={(e) => setFormState({ ...formState, password: e.target.value })}\n                            />\n                        </FormControl>\n                        <Button \n                            minWidth=\"full\" \n                            mt={5} \n                            bg={teal} \n                            textColor=\"white\" \n                            type=\"submit\"\n                            isLoading={isLoading}\n                        >Login</Button>\n                    </form>\n                </Box>\n                <OpenSource/>\n            </Box>\n            <Box pos=\"absolute\" top=\"0\" left=\"0\">\n                <ThemeSelector />\n            </Box>\n        </Flex>\n\n    );\n}","import { Redirect, Route } from 'react-router-dom';\nimport { useAppSelector } from '../app/hooks';\n\nexport const LoginRoute = ({ component: InternalComponent, ...rest } : any) => {\n    const refreshToken = useAppSelector((state) => !!state.user.token);\n\n    return (\n    <Route\n        {...rest}\n        render={(props) => \n            !!refreshToken ? (\n                <InternalComponent {...props}/>\n            ) : (\n                <Redirect to={{\n                    pathname: '/login',\n                    state: {\n                        from: props.location\n                    }\n                }}/>\n            )\n        }\n    />\n    );\n}","import { Box } from '@chakra-ui/layout';\nimport { Route, Switch } from 'react-router-dom';\nimport './App.css';\nimport { Dashboard } from './components/Dashboard';\nimport { Login } from './components/Login';\nimport { LoginRoute } from './routers/LoginRoute';\n\nfunction App() {\n  return (\n    <Box>\n      <Switch>\n        <Route exact component={Login} path=\"/login\" />\n        <LoginRoute exact component={Dashboard} path=\"/\" />\n      </Switch>\n    </Box>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport { washstationApi } from \"../services/washstation-service\";\nimport userReducer from \"../features/user/user-slice\";\n\nexport const store = configureStore({\n    reducer: {\n        user: userReducer,\n        [washstationApi.reducerPath]: washstationApi.reducer,\n    },\n    middleware: (getDefaultMiddleware) => {\n        return getDefaultMiddleware().concat(washstationApi.middleware);\n    },\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;","import { extendTheme, ThemeConfig } from \"@chakra-ui/react\";\n\nconst config: ThemeConfig = {\n    initialColorMode: 'light',\n    useSystemColorMode: false\n};\n\nconst theme = extendTheme({config});\n\nexport default theme;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { ChakraProvider, ColorModeScript } from \"@chakra-ui/react\"\nimport { Provider } from 'react-redux';\nimport { store } from './app/store';\nimport { BrowserRouter } from 'react-router-dom';\nimport theme from './theme';\nimport 'focus-visible/dist/focus-visible';\nimport { css, Global } from '@emotion/react';\n\n// Thank you https://medium.com/@keeganfamouss/accessibility-on-demand-with-chakra-ui-and-focus-visible-19413b1bc6f9\nconst GlobalStyles = css`\n  /*\n    This will hide the focus indicator if the element receives focus    via the mouse,\n    but it will still show up on keyboard focus.\n  */\n  .js-focus-visible :focus:not([data-focus-visible-added]) {\n     outline: none;\n     box-shadow: none;\n   }\n`;\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <ChakraProvider>\n        <BrowserRouter>\n          <Global styles={GlobalStyles} />\n          <ColorModeScript initialColorMode={theme.config.initialColorMode} />\n          <App />\n        </BrowserRouter>\n      </ChakraProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}